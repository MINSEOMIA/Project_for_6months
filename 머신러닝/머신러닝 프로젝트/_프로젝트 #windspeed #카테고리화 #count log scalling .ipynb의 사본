{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":" 프로젝트 #windspeed #카테고리화 #count log scalling .ipynb의 사본","provenance":[{"file_id":"1bNcMPUOk--7CNvRDQfxRdC9c8g7RUr3A","timestamp":1650944205056},{"file_id":"1-NIhJOcLbHo-nHa1Jrz2rmYvC3u8AR9H","timestamp":1650943806784},{"file_id":"1zk_aPFyNRAOFIH_DMxjpQPnOaIqIXeG7","timestamp":1650941668134}],"collapsed_sections":[],"authorship_tag":"ABX9TyMtIBXNY13PuOx6kIWo8d6d"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["#1단계 import package\n","import numpy as np\n","import matplotlib as mpl\n","import matplotlib.pyplot as plt\n","import os\n","import seaborn as sns\n","import pandas as pd\n","import datetime as dt\n","import scipy\n","import missingno as msno \n","plt.style.use('seaborn')\n","\n","\n","train = pd.read_csv('/content/train.csv')\n","test = pd.read_csv('/content/test.csv')\n","submission = pd.read_csv('/content/sampleSubmission.csv')"],"metadata":{"id":"OJ9qWYPBQQsw","executionInfo":{"status":"ok","timestamp":1650944539632,"user_tz":-540,"elapsed":297,"user":{"displayName":"Minseo Kim","userId":"17774756236114178170"}}},"execution_count":33,"outputs":[]},{"cell_type":"code","source":["#classifiaction.\n","from sklearn.linear_model import LogisticRegression\n","from sklearn.svm import LinearSVC,SVC\n","from sklearn.neighbors import KNeighborsClassifier\n","from sklearn.ensemble import RandomForestClassifier,GradientBoostingClassifier\n","from sklearn.tree import DecisionTreeClassifier\n","from sklearn.naive_bayes import GaussianNB\n","\n","#regression\n","from sklearn.linear_model import LinearRegression,Ridge,Lasso,RidgeCV\n","from sklearn.ensemble import RandomForestRegressor,BaggingRegressor,GradientBoostingRegressor,AdaBoostRegressor\n","from sklearn.svm import SVR\n","from sklearn.neighbors import KNeighborsRegressor\n","\n","#model selection\n","from sklearn.model_selection import train_test_split,cross_validate\n","from sklearn.model_selection import KFold\n","from sklearn.model_selection import GridSearchCV\n","\n","#evaluation metrics\n","from sklearn.metrics import mean_squared_log_error,mean_squared_error, r2_score,mean_absolute_error # for regression\n","from sklearn.metrics import accuracy_score,precision_score,recall_score,f1_score  # for classification"],"metadata":{"id":"Y7p7zhuew-Pb","executionInfo":{"status":"ok","timestamp":1650944540506,"user_tz":-540,"elapsed":543,"user":{"displayName":"Minseo Kim","userId":"17774756236114178170"}}},"execution_count":34,"outputs":[]},{"cell_type":"markdown","source":["데이터 탐색\n","- datetime - hourly date + timestamp  \n","\n","- season -  1 = spring, 2 = summer, 3 = fall, 4 = winter \n","- holiday - whether the day is considered a holiday\n","-workingday - whether the day is neither a weekend nor holiday\n","- weather - 1: Clear, Few clouds, Partly cloudy, Partly cloudy\n","2: Mist + Cloudy, Mist + Broken clouds, Mist + Few clouds, Mist\n","3: Light Snow, Light Rain + Thunderstorm + Scattered clouds, Light Rain + Scattered clouds >> 카테고리형\n","4: Heavy Rain + Ice Pallets + Thunderstorm + Mist, Snow + Fog \n","- temp - temperature in Celsius\n","- atemp - \"feels like\" temperature in Celsius\n","- humidity - relative humidity\n","- windspeed - wind speed\n","- casual - number of non-registered user rentals initiated\n","- registered - number of registered user rentals initiated\n","- count - number of total rentals << target"],"metadata":{"id":"K1X2n0fEbcS1"}},{"cell_type":"markdown","source":["#데이터 탐색"],"metadata":{"id":"SGnymvyhNkgR"}},{"cell_type":"markdown","source":["## Datetime 년 월 일 시간 요일로 해체하기"],"metadata":{"id":"-OJm64C2ciA8"}},{"cell_type":"code","source":["#datetime 컬럼 문자열 datetime으로 변경해야함...\n","train['datetime'] = pd.to_datetime(train['datetime'])\n","test['datetime'] = pd.to_datetime(test['datetime'])"],"metadata":{"id":"DrCUSCv9bQZh","executionInfo":{"status":"ok","timestamp":1650944540506,"user_tz":-540,"elapsed":28,"user":{"displayName":"Minseo Kim","userId":"17774756236114178170"}}},"execution_count":35,"outputs":[]},{"cell_type":"code","source":["train.info()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"gQEkCiJAbgba","executionInfo":{"status":"ok","timestamp":1650944540507,"user_tz":-540,"elapsed":28,"user":{"displayName":"Minseo Kim","userId":"17774756236114178170"}},"outputId":"633f1e75-d83b-421c-dfcd-c072cf0034f7"},"execution_count":36,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 10886 entries, 0 to 10885\n","Data columns (total 12 columns):\n"," #   Column      Non-Null Count  Dtype         \n","---  ------      --------------  -----         \n"," 0   datetime    10886 non-null  datetime64[ns]\n"," 1   season      10886 non-null  int64         \n"," 2   holiday     10886 non-null  int64         \n"," 3   workingday  10886 non-null  int64         \n"," 4   weather     10886 non-null  int64         \n"," 5   temp        10886 non-null  float64       \n"," 6   atemp       10886 non-null  float64       \n"," 7   humidity    10886 non-null  int64         \n"," 8   windspeed   10886 non-null  float64       \n"," 9   casual      10886 non-null  int64         \n"," 10  registered  10886 non-null  int64         \n"," 11  count       10886 non-null  int64         \n","dtypes: datetime64[ns](1), float64(3), int64(8)\n","memory usage: 1020.7 KB\n"]}]},{"cell_type":"code","source":["#년,월,일,시간,요일 추출\n","train['year']=train['datetime'].dt.year # 년도 추출 \n","train['month']=train['datetime'].dt.month # 월도 추출 \n","train['day']=train['datetime'].dt.day # 일 추출 \n","train['hour']=train['datetime'].dt.hour # 시 추출 \n","train['dayofweek']=train['datetime'].dt.dayofweek #요일 추출 , 월요일:0, 일요일:6"],"metadata":{"id":"OBamtmhwi-Fp","executionInfo":{"status":"ok","timestamp":1650944540507,"user_tz":-540,"elapsed":26,"user":{"displayName":"Minseo Kim","userId":"17774756236114178170"}}},"execution_count":37,"outputs":[]},{"cell_type":"code","source":["#불필요한 컬럼 드랍\n","#datatime object+ 위에서 따로 추출해내서 필요없음 \n","train.drop([\"datetime\"], axis = 1, inplace = True)"],"metadata":{"id":"Rjmi7HDJ0QeN","executionInfo":{"status":"ok","timestamp":1650944540508,"user_tz":-540,"elapsed":27,"user":{"displayName":"Minseo Kim","userId":"17774756236114178170"}}},"execution_count":38,"outputs":[]},{"cell_type":"code","source":["test['year']=test['datetime'].dt.year # 년도 추출 \n","test['month']=test['datetime'].dt.month # 월도 추출 \n","test['day']=test['datetime'].dt.day # 일 추출 \n","test['hour']=test['datetime'].dt.hour # 시 추출 \n","test['dayofweek']=test['datetime'].dt.dayofweek #요일 추출 , 월요일:0, 일요일:6"],"metadata":{"id":"m_yFP_GOjB4L","executionInfo":{"status":"ok","timestamp":1650944540508,"user_tz":-540,"elapsed":26,"user":{"displayName":"Minseo Kim","userId":"17774756236114178170"}}},"execution_count":39,"outputs":[]},{"cell_type":"code","source":["#datatime object+ 위에서 따로 추출해내서 필요없음 \n","test.drop([\"datetime\"], axis = 1, inplace = True)"],"metadata":{"id":"JpNlXgbp26H7","executionInfo":{"status":"ok","timestamp":1650944540509,"user_tz":-540,"elapsed":21,"user":{"displayName":"Minseo Kim","userId":"17774756236114178170"}}},"execution_count":40,"outputs":[]},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","import seaborn as sns"],"metadata":{"id":"WoSes4FxeecW","executionInfo":{"status":"ok","timestamp":1650944540509,"user_tz":-540,"elapsed":20,"user":{"displayName":"Minseo Kim","userId":"17774756236114178170"}}},"execution_count":41,"outputs":[]},{"cell_type":"markdown","source":["##데이터 전처리"],"metadata":{"id":"lVxYxLPvbRjI"}},{"cell_type":"markdown","source":["2012년에 수요량 증가.\n","-> 단 두개의 year만 비교가능하기때문에 수요가 앞으로도 지속증가하는지에 대한 여부는 알 수 없음, \n"],"metadata":{"id":"PwaQ0cpZILYG"}},{"cell_type":"markdown","source":["비교적 12, 1, 2월에 자전거 수요량이 적음 -> 추운기온, 겨울\n","6, 7, 8,9월에 자전거 수요량이 가장 많음 -> 따듯한기온,여름"],"metadata":{"id":"HardlsgZITDY"}},{"cell_type":"markdown","source":["day별로 명백한 차이가 없음 "],"metadata":{"id":"-dpc4bJSIW62"}},{"cell_type":"markdown","source":["월별로 출력했을 때 분명, 12,1,2월(겨울)에 가장 수요량이 적었는데, \n","\n","위 season 그래프와는 다르게 나왔다. \n","\n","따라서 season을 나누는 경계가 다름을 알 수 있었다."],"metadata":{"id":"LT85AhjVIdJw"}},{"cell_type":"code","source":["#season이 월별로 123 / 456 /789 /101112 로 나눠짐...\n","print(train[train['season'] == 1].month.unique())\n","print(train[train['season'] == 2].month.unique())\n","print(train[train['season'] == 3].month.unique())\n","print(train[train['season'] == 4].month.unique())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"VurancEaIm_T","executionInfo":{"status":"ok","timestamp":1650944540509,"user_tz":-540,"elapsed":19,"user":{"displayName":"Minseo Kim","userId":"17774756236114178170"}},"outputId":"b2a2bad6-917c-4213-c65c-51f181e02d6c"},"execution_count":42,"outputs":[{"output_type":"stream","name":"stdout","text":["[1 2 3]\n","[4 5 6]\n","[7 8 9]\n","[10 11 12]\n"]}]},{"cell_type":"code","source":["# 날씨와 count의 상관관계 확인 전, season을 올바른 데이터로 바꿔주기\n","# 워싱턴 D.C의 평균 기온 자료에 기반하여 세계절씩 봄/여름/가을/겨울로 나눈다.\n","\n","# 계절 분류\n","def change_season(month):\n","  if month in [12,1,2]:\n","    return 4\n","  elif month in [3,4,5]:\n","    return 1\n","  elif month in [6,7,8]:\n","    return 2\n","  else:\n","    return 3\n","train['season'] = train.month.apply(change_season)"],"metadata":{"id":"sY4b9hTCYnCI","executionInfo":{"status":"ok","timestamp":1650944540510,"user_tz":-540,"elapsed":17,"user":{"displayName":"Minseo Kim","userId":"17774756236114178170"}}},"execution_count":43,"outputs":[]},{"cell_type":"code","source":["# 날씨와 count의 상관관계 확인 전, season을 올바른 데이터로 바꿔주기\n","# 워싱턴 D.C의 평균 기온 자료에 기반하여 세계절씩 봄/여름/가을/겨울로 나눈다.\n","\n","# 계절 분류\n","def change_season(month):\n","  if month in [12,1,2]:\n","    return 4\n","  elif month in [3,4,5]:\n","    return 1\n","  elif month in [6,7,8]:\n","    return 2\n","  else:\n","    return 3\n","test['season'] = test.month.apply(change_season)"],"metadata":{"id":"O_hboDpU3B4Y","executionInfo":{"status":"ok","timestamp":1650944540511,"user_tz":-540,"elapsed":18,"user":{"displayName":"Minseo Kim","userId":"17774756236114178170"}}},"execution_count":44,"outputs":[]},{"cell_type":"code","source":["# 날씨와 count의 상관관계 확인 전, season을 올바른 데이터로 바꿔주기\n","# 워싱턴 D.C의 평균 기온 자료에 기반하여 세계절씩 봄/여름/가을/겨울로 나눈다.\n","\n","# 계절 분류\n","def change_season(month):\n","  if month in [12,1,2]:\n","    return 4\n","  elif month in [3,4,5]:\n","    return 1\n","  elif month in [6,7,8]:\n","    return 2\n","  else:\n","    return 3\n","test['season'] = test.month.apply(change_season)"],"metadata":{"id":"DnTDGDbqUsiO","executionInfo":{"status":"ok","timestamp":1650944540511,"user_tz":-540,"elapsed":17,"user":{"displayName":"Minseo Kim","userId":"17774756236114178170"}}},"execution_count":45,"outputs":[]},{"cell_type":"markdown","source":["시간대별로 보았을때, \n","8시 , 17시경에 가장 자전거 수요량이 많다. (출, 퇴근시간임을 알 수 있다.)"],"metadata":{"id":"_c1BrUV4I6Xh"}},{"cell_type":"markdown","source":["1: 근무일 / 0: 근무일 아닐 때\n","\n","근무일에는 출퇴근 시간에 수요량이 급증하고, \n","근무일이 아닐 때에는 오후 낮 시간대에 수요량이 증가\n","\n","따라서 holiday 변수도 예측에 영향을 줄 것이나 workingday 그래프와 비슷한 양상을 보일것이라고 예측"],"metadata":{"id":"MGAY9KUBN8Xd"}},{"cell_type":"markdown","source":["아주깨끗한날씨(1) 약간의 안개와 구름(2) 약간의 눈,비(3) 아주많은비와 우박(4)\n","1,2번날씨 > 3번날씨 > 4번날씨는 데이터가 거의 없음"],"metadata":{"id":"0VbMNmlDOtNX"}},{"cell_type":"markdown","source":["dayofweek 의 모든 양상은 비슷하게 나타남.... \n"],"metadata":{"id":"u5bSrikMXsJH"}},{"cell_type":"code","source":["#바람세기가 0인 값 측정\n","len(train[train['windspeed']==0])\n","# 결과 : 1313"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ew8uPp0gbZoJ","executionInfo":{"status":"ok","timestamp":1650944540512,"user_tz":-540,"elapsed":18,"user":{"displayName":"Minseo Kim","userId":"17774756236114178170"}},"outputId":"a18ac33f-5c11-4fe4-b968-ddf10d851139"},"execution_count":46,"outputs":[{"output_type":"execute_result","data":{"text/plain":["1313"]},"metadata":{},"execution_count":46}]},{"cell_type":"markdown","source":["바람세기 0 인걸 대체해야함\n","#Feature engineering\n","이상치 제거"],"metadata":{"id":"X_FyItb0bemk"}},{"cell_type":"markdown","source":["#iQR 방식을 사용한 이상치 제거\n","전체 데이터를 오름차순으로 정리한 후, 정확히 4등분한다. (25%, 50%, 75%, 100%) \n","\n","75%지점값 - 25%지점값의 = iQR\n","\n","그외 이상과 이하에 해당하는 값 = 이상치"],"metadata":{"id":"usdo5TSpdjRn"}},{"cell_type":"markdown","source":["....................40정도 지워짐......."],"metadata":{"id":"4SbFk042nPcz"}},{"cell_type":"markdown","source":["# 왜도 첨도 확인\n","\n","왜도0 첨도3\n","데이터의 분포가 한쪽으로 쏠린것을 의미\n","skew의 수치가 -2~+2 정도가 되어야 치우침이 없는 데이터\n","-2이하는 왼쪽으로 쏠린 데이터 (negative) +2 이상은 오른쪽으로 쏠린 데이터(positive)\n","positive일경우 변환방법 : square root, cube, log(밑10)\n","negative일경우 변환방법 : square, cube root, logarithmic(밑2인log)\n","첨도\n","분포의 뾰족함이나 평평함에 관련된 것이 아니라 분포의 tail에 대한 모든 것\n","한쪽 꼬리부분의 극값과 다른쪽 꼬리의 극값과의 차이를 보여줌\n","아웃라이어를 찾을 때 주로 사용\n","첨도가 높다 -> 아웃라이어가 많이 있다"],"metadata":{"id":"FVYCcr6KlxjF"}},{"cell_type":"code","source":["#count log_scalling 으로 정규화\n","#lambda 를 사용해서 로그를 취해준 count값을 count_log 컬럼으로 생성\n","train['count_log'] = train['count'].map(lambda i:np.log(i) if i > 0 else 0)\n","\n","fig, ax = plt.subplots(1,1, figsize = (10, 6))\n","graph = sns.distplot(train['count_log']\n","\t\t\t, color = 'b'\n","            , label = 'skewness: {:2f}'.format(train['count_log'].skew())\n","            , ax = ax)\n","graph = graph.legend(loc = 'best')\n","\n","print(\"skewness(왜도): %f\" %train['count_log'].skew())\n","print(\"kurtosis(첨도): %f\" %train['count_log'].kurt())\n","\n","#필요없는 count값 없애주기\n","train.drop('count', axis = 1, inplace = True)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":483},"id":"0938t5uF8uam","executionInfo":{"status":"ok","timestamp":1650944541090,"user_tz":-540,"elapsed":592,"user":{"displayName":"Minseo Kim","userId":"17774756236114178170"}},"outputId":"3d7178eb-6d5a-4d9c-d4f1-75c66e664dec"},"execution_count":47,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/seaborn/distributions.py:2619: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `histplot` (an axes-level function for histograms).\n","  warnings.warn(msg, FutureWarning)\n"]},{"output_type":"stream","name":"stdout","text":["skewness(왜도): -0.971228\n","kurtosis(첨도): 0.246622\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 720x432 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["count가 0에 치우쳐짐"],"metadata":{"id":"9NXuSE1ZnL1j"}},{"cell_type":"markdown","source":["변수들의 크기 차이에 민감한 모델을 사용한다면 Scaling \n","타겟변수 count 에만 Log를 취함\n","왜도와 첨도의 수치도 정규화\n","데이터가 0 하나에만 치우쳐져 있는 것이 개선된 것을 확인\n","\n","앞으로는 count_log 값을 예측에 활용해야함\n","\n"],"metadata":{"id":"UY44tIj5qudG"}},{"cell_type":"markdown","source":["#windspeed 0값 개선\n","풍속은 상식적으로 아예 0으로 관측되기 어려움\n","조금만 바람이 불어도 0,01로는 나와야하는거 아닌가\n","아님 관측이 안돼서 결측치로 0을 넣은 걸수도\n","\n","<< 결측값 처리 방법>>\n","\n","- 결측값을 앞 방향 혹은 뒷 방향으로 채우기\n","- 결측값을 변수별 평균으로 채우기\n","- 결측값을 가진 데이터를 삭제하기\n","- 결측값을 0 이나, 아예 다른 값으로 (-999) 대체하기\n","- 결측값을 예측된 값으로 대체하기 (머신러닝을 돌려서)\n","\n","\n","(1)선택한 첫번째 방법\n"," 0이 아닌값과 날씨변수로 예측해서 값 채워넣기\n","\n","windspeed가 null값인 경우를 0으로 처리한 것이라면\n","결측치를 채우는 방법중 예측된 값으로 대체하는 방법으로 0을 대체"],"metadata":{"id":"wIHpzZUbrNN3"}},{"cell_type":"code","source":["from sklearn.ensemble import RandomForestClassifier\n","# RandomForest로 값을 예측해\n","def predict_windspeed(data):\n","    dataWind0 = data.loc[data[\"windspeed\"] == 0]\n","    dataWindNot0 = data.loc[data[\"windspeed\"] != 0]\n","    # 풍속 데이터를 0인 값과 아닌 값들로 나눠준다\n","\n","    wcol = [\"season\", \"weather\", \"humidity\", \"day\", \"temp\", \"atemp\"]\n","    # 예측에 필요한 변수들을 지정합니다. \n","    # 풍속이 날씨에 대한 변수이기 때문에  날씨에 관련된 변수들을 예측의 독립변수로 지정\n","\n","    dataWindNot0[\"windspeed\"] = dataWindNot0[\"windspeed\"].astype(\"str\")\n","    # 풍속이 0이 아닌 값들을 string데이터로 변환\n","\n","    rf_wind = RandomForestClassifier()\n","    rf_wind.fit(dataWindNot0[wcol], dataWindNot0[\"windspeed\"])\n","    wind0 = rf_wind.predict(X=dataWind0[wcol])\n","    # 랜덤포레스트를 사용하여 wcol의 변수들로 0인 값들을 학습, 예측\n","    \n","    predictWind0 = dataWind0\n","    predictWindNot0 = dataWindNot0\n","    # 예측한 값을 넣어줄 데이터프레임을 만듦\n","\n","    predictWind0[\"windspeed\"] = wind0\n","    # 예측값들을 넣어줌\n","\n","    data = predictWindNot0.append(predictWind0)\n","    # 0이 아닌 데이터들과 예측값들을 합쳐줌\n","\n","    data[\"windspeed\"] = data[\"windspeed\"].astype(\"float\")\n","    # 풍속의 데이터들을 다시 float 타입으로 변환\n","    \n","    data.reset_index(inplace = True)\n","    data.drop(\"index\", inplace = True, axis = 1)\n","    \n","    return data"],"metadata":{"id":"NS5wxXOcv4EN","executionInfo":{"status":"ok","timestamp":1650944541091,"user_tz":-540,"elapsed":9,"user":{"displayName":"Minseo Kim","userId":"17774756236114178170"}}},"execution_count":48,"outputs":[]},{"cell_type":"code","source":["train = predict_windspeed(train)\n","test = predict_windspeed(test)\n","\n","#독립변수 + 0이 아닌 데이터로 분류했던 windspeed를 RandomForest로 학습\n","#학습시킨 모델을 통해 0 값을 가졌던 windspeed를 예측\n"],"metadata":{"id":"mgWJzgS-0_sb","executionInfo":{"status":"ok","timestamp":1650944544066,"user_tz":-540,"elapsed":2984,"user":{"displayName":"Minseo Kim","userId":"17774756236114178170"}}},"execution_count":49,"outputs":[]},{"cell_type":"code","source":["fig, (ax1, ax2) = plt.subplots(2,1)\n","fig.set_size_inches(20,15)\n","\n","#갯수를 세야하니 countplot\n","sns.countplot(data = train, x = 'windspeed', ax = ax1)\n","sns.countplot(data = test, x = 'windspeed', ax = ax2)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":885},"id":"m6S-RgAZwuhj","executionInfo":{"status":"ok","timestamp":1650944544642,"user_tz":-540,"elapsed":581,"user":{"displayName":"Minseo Kim","userId":"17774756236114178170"}},"outputId":"d7327ab6-7ded-417c-99c4-b2817e83ba4f"},"execution_count":50,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.axes._subplots.AxesSubplot at 0x7fb835445250>"]},"metadata":{},"execution_count":50},{"output_type":"display_data","data":{"text/plain":["<Figure size 1440x1080 with 2 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["##결론\n","\n","Bike Sharing Demand EDA에서는 뚜렷한 특징을 보이는 Feature\n","\n"," -시간(hour): 출퇴근 시간인 8시와 17~18시에 대여량이 가장 많다\n","\n","-요일(dayofweek): 주중에 출퇴근, 주말에는 오후 시간대에 대여량이 많다\n","\n","-계절(season): 여름. \n","\n","-년도(year): 2011<2012\n","\n","\n","\n","drop:\n","\n","atemperature (0.98)\n","\n","holiday, dayofweek (workingday만 가져가기)\n"],"metadata":{"id":"ICuWebWTvIAv"}},{"cell_type":"markdown","source":["#One hot encoding"],"metadata":{"id":"Ej2CYTyvdI_y"}},{"cell_type":"markdown","source":["#Modeling 전 변수 정리 (drop 실행)"],"metadata":{"id":"VBT4WP-5dGwz"}},{"cell_type":"code","source":["# 연속형 feature와 범주형 feature\n","# 범주형 feature의 type을 category로 변경 해 준다.\n","categorical_feature_names = ['season',\"holiday\",\"workingday\",\"weather\",\n","                             \"dayofweek\",\"month\",\"year\",\"hour\"]\n","for var in categorical_feature_names:\n","    train[var] = train[var].astype(\"category\")\n","    test[var] = test[var].astype(\"category\")\n","feature_names = [ 'season',\"weather\", \"temp\", \"atemp\", \"humidity\",\n","                 \"year\", \"hour\", \"dayofweek\", \"holiday\", \"workingday\"\n","                ]\n","\n","feature_names"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"3XWIPY5-znUI","executionInfo":{"status":"ok","timestamp":1650944544643,"user_tz":-540,"elapsed":18,"user":{"displayName":"Minseo Kim","userId":"17774756236114178170"}},"outputId":"54ff9b7b-c0b9-4d39-abbf-610f15f8ab38"},"execution_count":51,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['season',\n"," 'weather',\n"," 'temp',\n"," 'atemp',\n"," 'humidity',\n"," 'year',\n"," 'hour',\n"," 'dayofweek',\n"," 'holiday',\n"," 'workingday']"]},"metadata":{},"execution_count":51}]},{"cell_type":"code","source":["X_train = train[feature_names]\n","\n","print(X_train.shape)\n","X_train.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":225},"id":"yfJvEJu0zr2p","executionInfo":{"status":"ok","timestamp":1650944544979,"user_tz":-540,"elapsed":350,"user":{"displayName":"Minseo Kim","userId":"17774756236114178170"}},"outputId":"1672d931-d50f-46b5-9440-e03fbb327795"},"execution_count":52,"outputs":[{"output_type":"stream","name":"stdout","text":["(10886, 10)\n"]},{"output_type":"execute_result","data":{"text/plain":["  season weather   temp   atemp  humidity  year hour dayofweek holiday  \\\n","0      4       2   9.84  12.880        75  2011    5         5       0   \n","1      4       1  15.58  19.695        76  2011   10         5       0   \n","2      4       1  14.76  16.665        81  2011   11         5       0   \n","3      4       1  17.22  21.210        77  2011   12         5       0   \n","4      4       2  18.86  22.725        72  2011   13         5       0   \n","\n","  workingday  \n","0          0  \n","1          0  \n","2          0  \n","3          0  \n","4          0  "],"text/html":["\n","  <div id=\"df-1ec7a80d-56ca-4548-8bd8-c6300eca5aa8\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>season</th>\n","      <th>weather</th>\n","      <th>temp</th>\n","      <th>atemp</th>\n","      <th>humidity</th>\n","      <th>year</th>\n","      <th>hour</th>\n","      <th>dayofweek</th>\n","      <th>holiday</th>\n","      <th>workingday</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>4</td>\n","      <td>2</td>\n","      <td>9.84</td>\n","      <td>12.880</td>\n","      <td>75</td>\n","      <td>2011</td>\n","      <td>5</td>\n","      <td>5</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>4</td>\n","      <td>1</td>\n","      <td>15.58</td>\n","      <td>19.695</td>\n","      <td>76</td>\n","      <td>2011</td>\n","      <td>10</td>\n","      <td>5</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>4</td>\n","      <td>1</td>\n","      <td>14.76</td>\n","      <td>16.665</td>\n","      <td>81</td>\n","      <td>2011</td>\n","      <td>11</td>\n","      <td>5</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4</td>\n","      <td>1</td>\n","      <td>17.22</td>\n","      <td>21.210</td>\n","      <td>77</td>\n","      <td>2011</td>\n","      <td>12</td>\n","      <td>5</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>4</td>\n","      <td>2</td>\n","      <td>18.86</td>\n","      <td>22.725</td>\n","      <td>72</td>\n","      <td>2011</td>\n","      <td>13</td>\n","      <td>5</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-1ec7a80d-56ca-4548-8bd8-c6300eca5aa8')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-1ec7a80d-56ca-4548-8bd8-c6300eca5aa8 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-1ec7a80d-56ca-4548-8bd8-c6300eca5aa8');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":52}]},{"cell_type":"code","source":["X_test = test[feature_names]\n","\n","print(X_test.shape)\n","X_test.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":225},"id":"GpmkMUo3zto_","executionInfo":{"status":"ok","timestamp":1650944544981,"user_tz":-540,"elapsed":40,"user":{"displayName":"Minseo Kim","userId":"17774756236114178170"}},"outputId":"0b225ba1-3908-4df2-a2ef-f039aceff308"},"execution_count":53,"outputs":[{"output_type":"stream","name":"stdout","text":["(6493, 10)\n"]},{"output_type":"execute_result","data":{"text/plain":["  season weather   temp   atemp  humidity  year hour dayofweek holiday  \\\n","0      4       1  10.66  11.365        56  2011    0         3       0   \n","1      4       1  10.66  12.880        56  2011    3         3       0   \n","2      4       1  10.66  12.880        56  2011    4         3       0   \n","3      4       1   9.84  11.365        60  2011    5         3       0   \n","4      4       1   9.02  10.605        60  2011    6         3       0   \n","\n","  workingday  \n","0          1  \n","1          1  \n","2          1  \n","3          1  \n","4          1  "],"text/html":["\n","  <div id=\"df-247603cf-b305-4949-8350-339a82a2ab03\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>season</th>\n","      <th>weather</th>\n","      <th>temp</th>\n","      <th>atemp</th>\n","      <th>humidity</th>\n","      <th>year</th>\n","      <th>hour</th>\n","      <th>dayofweek</th>\n","      <th>holiday</th>\n","      <th>workingday</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>4</td>\n","      <td>1</td>\n","      <td>10.66</td>\n","      <td>11.365</td>\n","      <td>56</td>\n","      <td>2011</td>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>4</td>\n","      <td>1</td>\n","      <td>10.66</td>\n","      <td>12.880</td>\n","      <td>56</td>\n","      <td>2011</td>\n","      <td>3</td>\n","      <td>3</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>4</td>\n","      <td>1</td>\n","      <td>10.66</td>\n","      <td>12.880</td>\n","      <td>56</td>\n","      <td>2011</td>\n","      <td>4</td>\n","      <td>3</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4</td>\n","      <td>1</td>\n","      <td>9.84</td>\n","      <td>11.365</td>\n","      <td>60</td>\n","      <td>2011</td>\n","      <td>5</td>\n","      <td>3</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>4</td>\n","      <td>1</td>\n","      <td>9.02</td>\n","      <td>10.605</td>\n","      <td>60</td>\n","      <td>2011</td>\n","      <td>6</td>\n","      <td>3</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-247603cf-b305-4949-8350-339a82a2ab03')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-247603cf-b305-4949-8350-339a82a2ab03 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-247603cf-b305-4949-8350-339a82a2ab03');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":53}]},{"cell_type":"code","source":["label_name = \"count\"\n","\n","y_train = train[label_name]\n","\n","print(y_train.shape)\n","y_train.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":536},"id":"g84_tG6_zvlG","executionInfo":{"status":"error","timestamp":1650944560151,"user_tz":-540,"elapsed":348,"user":{"displayName":"Minseo Kim","userId":"17774756236114178170"}},"outputId":"76123e5c-ad72-4b04-e1a9-4048dac09b9f"},"execution_count":55,"outputs":[{"output_type":"error","ename":"KeyError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36mget_loc\u001b[0;34m(self, key, method, tolerance)\u001b[0m\n\u001b[1;32m   3360\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3361\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcasted_key\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3362\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mKeyError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0merr\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/_libs/index.pyx\u001b[0m in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[0;34m()\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/_libs/index.pyx\u001b[0m in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[0;34m()\u001b[0m\n","\u001b[0;32mpandas/_libs/hashtable_class_helper.pxi\u001b[0m in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[0;34m()\u001b[0m\n","\u001b[0;32mpandas/_libs/hashtable_class_helper.pxi\u001b[0m in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[0;34m()\u001b[0m\n","\u001b[0;31mKeyError\u001b[0m: 'Count'","\nThe above exception was the direct cause of the following exception:\n","\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)","\u001b[0;32m<ipython-input-55-5ef5ed7eb649>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mlabel_name\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m\"Count\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0my_train\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtrain\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mlabel_name\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      4\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my_train\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36m__getitem__\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   3456\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnlevels\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3457\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_getitem_multilevel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3458\u001b[0;31m             \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3459\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mis_integer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mindexer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3460\u001b[0m                 \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mindexer\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36mget_loc\u001b[0;34m(self, key, method, tolerance)\u001b[0m\n\u001b[1;32m   3361\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcasted_key\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3362\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mKeyError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0merr\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3363\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0merr\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3364\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3365\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mis_scalar\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0misna\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhasnans\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyError\u001b[0m: 'Count'"]}]},{"cell_type":"code","source":["#train = pd.get_dummies(train, columns=['year', 'month', 'day', 'hour', 'holiday', 'workingday'])\n","#test = pd.get_dummies(test, columns=['year', 'month', 'day', 'hour', 'holiday', 'workingday'])"],"metadata":{"id":"ayqImw8y1rGL","executionInfo":{"status":"ok","timestamp":1650944560639,"user_tz":-540,"elapsed":44,"user":{"displayName":"Minseo Kim","userId":"17774756236114178170"}}},"execution_count":56,"outputs":[]},{"cell_type":"code","source":["#train에 사용될 변수\n","\n","#submission의 형태를 살펴보았을 때, datetime을 기준으로 예측값을 적엇다.\n","#따라서 test의 datetime은 미래의 submission 을 위해서 따로 저장해두기로 한다.\n","test_datetime = test['datetime']\n","\n","train.drop(['atemp', 'holiday','dayofweek'], axis = 1, inplace = True)\n","test.drop(['atemp', 'holiday','dayofweek'], axis = 1, inplace = True) "],"metadata":{"id":"LOxhLQeoZdxC","colab":{"base_uri":"https://localhost:8080/","height":536},"executionInfo":{"status":"error","timestamp":1650944561004,"user_tz":-540,"elapsed":408,"user":{"displayName":"Minseo Kim","userId":"17774756236114178170"}},"outputId":"6f3550be-d700-4453-fa1c-fecb5ad98bde"},"execution_count":57,"outputs":[{"output_type":"error","ename":"KeyError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36mget_loc\u001b[0;34m(self, key, method, tolerance)\u001b[0m\n\u001b[1;32m   3360\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3361\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcasted_key\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3362\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mKeyError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0merr\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/_libs/index.pyx\u001b[0m in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[0;34m()\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/_libs/index.pyx\u001b[0m in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[0;34m()\u001b[0m\n","\u001b[0;32mpandas/_libs/hashtable_class_helper.pxi\u001b[0m in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[0;34m()\u001b[0m\n","\u001b[0;32mpandas/_libs/hashtable_class_helper.pxi\u001b[0m in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[0;34m()\u001b[0m\n","\u001b[0;31mKeyError\u001b[0m: 'datetime'","\nThe above exception was the direct cause of the following exception:\n","\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)","\u001b[0;32m<ipython-input-57-0d458a7faa9a>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;31m#submission의 형태를 살펴보았을 때, datetime을 기준으로 예측값을 적엇다.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;31m#따라서 test의 datetime은 미래의 submission 을 위해서 따로 저장해두기로 한다.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 5\u001b[0;31m \u001b[0mtest_datetime\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtest\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'datetime'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      6\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0mtrain\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdrop\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'atemp'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'holiday'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'dayofweek'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minplace\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36m__getitem__\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   3456\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnlevels\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3457\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_getitem_multilevel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3458\u001b[0;31m             \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3459\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mis_integer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mindexer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3460\u001b[0m                 \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mindexer\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36mget_loc\u001b[0;34m(self, key, method, tolerance)\u001b[0m\n\u001b[1;32m   3361\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcasted_key\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3362\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mKeyError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0merr\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3363\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0merr\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3364\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3365\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mis_scalar\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0misna\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhasnans\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyError\u001b[0m: 'datetime'"]}]},{"cell_type":"code","source":["train.columns"],"metadata":{"id":"d-jE9ufEdQMk","executionInfo":{"status":"aborted","timestamp":1650944560959,"user_tz":-540,"elapsed":355,"user":{"displayName":"Minseo Kim","userId":"17774756236114178170"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["train.info()\n","#-범주형 데이터 int64 category로 변경해야 하나?\n","#feature_names=['season','holiday','workingday','weather','temp','atemp',\n","              #'humidity','windspeed','year','hour','dayofweek']\n","\n","#-수리형을 범주형으로 바꿔주는 for 문 \n","#c_f_n =['season','holiday','workingday','weather',\n","        #'year','hour','dayofweek','month']\n","\n","#for v in c_f_n:\n","    #-dtype이 int64라서 category로 변경\n","    #train[v]=train[v].astype(\"category\")\n","    #test[v]=train[v].astype(\"category\")\n","#train.info() #- dtype 변경 확인 \n","\n","#- 4개의 변수로 되어있음 확인 \n","#train['season'].dtypes \n","#test['season'].dtypes"],"metadata":{"id":"xViIPXnMOMgR","executionInfo":{"status":"aborted","timestamp":1650944560960,"user_tz":-540,"elapsed":356,"user":{"displayName":"Minseo Kim","userId":"17774756236114178170"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["X = train.drop('count_log', axis = 1)\n","y = train['count_log']\n"],"metadata":{"id":"KqWQujJUoBlx","executionInfo":{"status":"aborted","timestamp":1650944560963,"user_tz":-540,"elapsed":359,"user":{"displayName":"Minseo Kim","userId":"17774756236114178170"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from sklearn.model_selection import train_test_split\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)"],"metadata":{"id":"dchkjdgIoBcg","executionInfo":{"status":"aborted","timestamp":1650944560970,"user_tz":-540,"elapsed":365,"user":{"displayName":"Minseo Kim","userId":"17774756236114178170"}}},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["##모델링 -시도(2) rmsle 만들어서 돌리기\n"],"metadata":{"id":"8kf9RGE89kpR"}},{"cell_type":"code","source":["lr_reg = LinearRegression()\n","lr_reg.fit(X_train, y_train)\n","pred = lr_reg.predict(X_test)\n","\n","y_test_exp = np.expm1(y_test)\n","pred_exp = np.expm1(pred)\n","print('LinearRegression RMSLE:', rmsle(y_test_exp, pred_exp))\n"],"metadata":{"id":"6ejSf_etkhu7","executionInfo":{"status":"aborted","timestamp":1650944560971,"user_tz":-540,"elapsed":367,"user":{"displayName":"Minseo Kim","userId":"17774756236114178170"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from sklearn.ensemble import RandomForestRegressor\n","randomforest_model = RandomForestRegressor(n_estimators=100)\n","\n","y_train_log = np.log1p(y_train)\n","randomforest_model.fit(X_train, y_train_log)\n","\n","preds = randomforest_model.predict(X_train)\n","score_rf = rmsle(np.exp(y_train_log),np.exp(preds))\n","print (\"RMSLE Value For Random Forest: \", score_rf)\n","predsTest = randomforest_model.predict(X_test)"],"metadata":{"id":"jkhUaBM5kJHx","executionInfo":{"status":"aborted","timestamp":1650944560972,"user_tz":-540,"elapsed":367,"user":{"displayName":"Minseo Kim","userId":"17774756236114178170"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[""],"metadata":{"id":"m8T6FFlPj_Sl","executionInfo":{"status":"aborted","timestamp":1650944560979,"user_tz":-540,"elapsed":374,"user":{"displayName":"Minseo Kim","userId":"17774756236114178170"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor\n","from xgboost import XGBRegressor\n","from lightgbm import LGBMRegressor\n","rf_reg = RandomForestRegressor(n_estimators=500)\n","rf_reg.fit(X_train, y_train_log)\n","pred = rf_reg.predict(X_test)\n","\n"],"metadata":{"id":"pyXeIGNSjLlE","executionInfo":{"status":"aborted","timestamp":1650944560980,"user_tz":-540,"elapsed":368,"user":{"displayName":"Minseo Kim","userId":"17774756236114178170"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["xgb_reg = XGBRegressor(n_estimators=500)\n","xgb_reg.fit(X_train, y_train_log)\n","pred = xgb_reg.predict(X_test)\n","\n","y_test_exp = np.expm1(y_test)\n","pred_exp = np.expm1(pred)\n","print('XGBRegressor RMSLE:', rmsle(y_test_exp, pred_exp))"],"metadata":{"id":"JTgV2BPUk-e7","executionInfo":{"status":"aborted","timestamp":1650944560980,"user_tz":-540,"elapsed":367,"user":{"displayName":"Minseo Kim","userId":"17774756236114178170"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["y_test_exp = np.expm1(y_test)\n","pred_exp = np.expm1(pred)\n","print('RandomForestRegressor RMSLE:', rmsle(y_test_exp, pred_exp))"],"metadata":{"id":"skj_GDw5jLil","executionInfo":{"status":"aborted","timestamp":1650944560991,"user_tz":-540,"elapsed":378,"user":{"displayName":"Minseo Kim","userId":"17774756236114178170"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#6 주영님\n","#https://github.com/BaekKyunShin/Kaggle/blob/master/Bike_Sharing_Demand/Bike%20Sharing%20Demand%20by%20Random%20Forest.ipynb\n","from sklearn.metrics import make_scorer\n","def RMSLE(predicted_values, actual_values):\n","    predicted_values = np.array(predicted_values)\n","    actual_values = np.array(actual_values)\n","    \n","    log_predict = np.log(predicted_values + 1)\n","    log_actual = np.log(actual_values + 1)\n","    \n","    difference = log_predict - log_actual\n","    difference = np.square(difference)\n","    \n","    mean_difference = difference.mean()\n","    \n","    score = np.sqrt(mean_difference)\n","    \n","    return score\n","    \n","RMSLE_scorer = make_scorer(RMSLE)\n","RMSLE_scorer"],"metadata":{"id":"Rvb5Ek7Jjv-h","executionInfo":{"status":"aborted","timestamp":1650944560992,"user_tz":-540,"elapsed":378,"user":{"displayName":"Minseo Kim","userId":"17774756236114178170"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[" #선형회귀 모델\n"," from sklearn.linear_model import LinearRegression, Ridge, Lasso\n","from sklearn.model_selection import GridSearchCV\n","from sklearn import metrics\n","import warnings\n","pd.options.mode.chained_assignment = None\n","warnings.filterwarnings('ignore', category=DeprecationWarning)\n","\n","# 선형회귀 모델을 초기화\n","linear_model = LinearRegression()\n","\n","# 모델 학습\n","y_train_log = np.log1p(y_train)\n","linear_model.fit(X_train, y_train_log)\n","\n","# 예측하고 정확도를 평가한다.\n","preds = linear_model.predict(X_train)\n","print(\"RMSLE Value for linear regression: \",\n","     RMSLE(np.exp(y_train_log), np.exp(preds)))"],"metadata":{"id":"CzDiSAj0k83E","executionInfo":{"status":"aborted","timestamp":1650944560996,"user_tz":-540,"elapsed":382,"user":{"displayName":"Minseo Kim","userId":"17774756236114178170"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#릿지 모델\n","ridge_model = Ridge()\n","ridge_params_ = {'max_iter':[3000],\n","                 'alpha':[0.01, 0.1, 1, 2, 3, 4, 10,\n","                          30,100,200,300,400,800,900,1000]}\n","rmsle_scorer = metrics.make_scorer(RMSLE, greater_is_better=False)\n","grid_ridge_model = GridSearchCV(ridge_model,\n","                          ridge_params_,\n","                          scoring = rmsle_scorer,\n","                          cv=5)\n","\n","y_train_log = np.log1p(y_train)\n","grid_ridge_model.fit(X_train, y_train_log)\n","preds = grid_ridge_model.predict(X_train)\n","print (grid_ridge_model.best_params_)\n","print (\"RMSLE Value For Ridge Regression: \", \n","       RMSLE(np.exp(y_train_log),np.exp(preds)))"],"metadata":{"id":"syps7y3NmFeG","executionInfo":{"status":"aborted","timestamp":1650944561000,"user_tz":-540,"elapsed":386,"user":{"displayName":"Minseo Kim","userId":"17774756236114178170"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["lasso_model = Lasso()\n","\n","alpha  = 1/np.array([0.1, 1, 2, 3, 4, 10, 30,100,200,300,400,800,900,1000])\n","lasso_params_ = {'max_iter':[3000], 'alpha':alpha}\n","\n","grid_lasso_model = GridSearchCV(lasso_model,\n","                          lasso_params_,\n","                          scoring = rmsle_scorer,\n","                          cv=5)\n","\n","y_train_log = np.log1p(y_train)\n","grid_lasso_model.fit(X_train, y_train_log)\n","preds = grid_lasso_model.predict(X_train)\n","print (grid_lasso_model.best_params_)\n","print (\"RMSLE Value For Lasso Regression: \", \n","       RMSLE(np.exp(y_train_log),np.exp(preds)))"],"metadata":{"id":"_acNrYfmQROF","executionInfo":{"status":"aborted","timestamp":1650944561000,"user_tz":-540,"elapsed":386,"user":{"displayName":"Minseo Kim","userId":"17774756236114178170"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from sklearn.ensemble import RandomForestRegressor\n","randomforest_model = RandomForestRegressor(n_estimators=100)\n","\n","y_train_log = np.log1p(y_train)\n","randomforest_model.fit(X_train, y_train_log)\n","\n","preds = randomforest_model.predict(X_train)\n","score_rf = RMSLE(np.exp(y_train_log),np.exp(preds))\n","print (\"RMSLE Value For Random Forest: \", score_rf)\n","predsTest = randomforest_model.predict(X_test)"],"metadata":{"id":"khC_Yv-wQRI3","executionInfo":{"status":"aborted","timestamp":1650944561001,"user_tz":-540,"elapsed":382,"user":{"displayName":"Minseo Kim","userId":"17774756236114178170"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["fig,(ax1,ax2)= plt.subplots(ncols=2)\n","fig.set_size_inches(12,5)\n","sns.distplot(y_train,ax=ax1,bins=50)\n","sns.distplot(np.exp(predsTest),ax=ax2,bins=50)"],"metadata":{"id":"te8RigWVaRvo","executionInfo":{"status":"aborted","timestamp":1650944561003,"user_tz":-540,"elapsed":383,"user":{"displayName":"Minseo Kim","userId":"17774756236114178170"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from sklearn.ensemble import GradientBoostingRegressor\n","gbm = GradientBoostingRegressor(n_estimators=4000, alpha=0.01);\n","\n","y_train_log = np.log1p(y_train)\n","gbm.fit(X_train, y_train_log)\n","\n","preds = gbm.predict(X_train)\n","score = RMSLE(np.exp(y_train_log),np.exp(preds))\n","print (\"RMSLE Value For Gradient Boost: \", score)"],"metadata":{"id":"ulgQ9iuLQRC9","executionInfo":{"status":"aborted","timestamp":1650944561004,"user_tz":-540,"elapsed":384,"user":{"displayName":"Minseo Kim","userId":"17774756236114178170"}}},"execution_count":null,"outputs":[]}]}